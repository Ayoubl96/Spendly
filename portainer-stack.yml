# Spendly Production Stack - Fixed YAML Syntax
version: '3.8'

services:
  # Database first - most stable
  database:
    image: postgres:15-alpine
    container_name: spendly-database
    environment:
      - POSTGRES_DB=${DB_NAME:-spendly_prod}
      - POSTGRES_USER=${DB_USER:-spendly_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - /opt/spendly/data/postgres:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spendly_user -d spendly_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Frontend Service
  frontend:
    build:
      context: https://github.com/Ayoubl96/Spendly.git#main:frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=/api/v1
        - REACT_APP_UPLOAD_URL=/uploads
    container_name: spendly-frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


  # Backend Service  
  backend:
    build:
      context: https://github.com/Ayoubl96/Spendly.git#main:backend
      dockerfile: Dockerfile.prod
    container_name: spendly-backend
    environment:
      - ENVIRONMENT=production
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - FRONTEND_URL=${FRONTEND_URL:-https://spendly.ayoublefhim.com}
      - BACKEND_URL=${BACKEND_URL:-https://spendly.ayoublefhim.com}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://spendly.ayoublefhim.com}
      - DB_HOST=spendly-database
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-spendly_prod}
      - DB_USER=${DB_USER:-spendly_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_URL=postgresql://${DB_USER:-spendly_user}:${DB_PASSWORD}@spendly-database:5432/${DB_NAME:-spendly_prod}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=${JWT_EXPIRE:-7d}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - CORS_CREDENTIALS=true
    volumes:
      - /opt/spendly/data/uploads:/app/uploads
      - /opt/spendly/data/logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped


  # Init container to create directories
  init-dirs:
    image: alpine:latest
    container_name: spendly-init-dirs
    volumes:
      - /opt/spendly/data:/data
    command: >
      sh -c '
        echo "🏗️ Creating required directories..." &&
        mkdir -p /data/postgres /data/uploads /data/logs /data/nginx-logs /data/nginx-config /data/nginx-ui-config /data/nginx-ui-db &&
        chown -R 82:82 /data/nginx-logs /data/nginx-config 2>/dev/null || true &&
        chown -R 1000:1000 /data/uploads /data/logs /data/nginx-ui-config /data/nginx-ui-db 2>/dev/null || true &&
        echo "✅ Directories created successfully"
      '
    restart: "no"

  # Nginx - Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: spendly-nginx
    ports:
      - "8090:80"
    restart: unless-stopped
    volumes:
      - /opt/spendly/data/nginx-logs:/var/log/nginx
    depends_on:
      init-dirs:
        condition: service_completed_successfully
      frontend:
        condition: service_healthy
      backend:
        condition: service_started
    command: >
      sh -c '
        cat > /etc/nginx/conf.d/default.conf << EOF
      server {
          listen 80;
          server_name _;
          client_max_body_size 50m;
          access_log /var/log/nginx/access.log;
          error_log /var/log/nginx/error.log;
          
          location /nginx-health {
              return 200 "{\"status\": \"healthy\", \"server\": \"spendly-nginx\"}";
              add_header Content-Type application/json;
          }
          
          location /nginx-status {
              return 200 "Spendly Nginx - Running OK";
              add_header Content-Type text/plain;
          }
          
          location /test-frontend {
              proxy_pass http://spendly-frontend:80;
              proxy_connect_timeout 2s;
              proxy_read_timeout 5s;
          }
          
          location /test-backend {
              proxy_pass http://spendly-backend:8000;
              proxy_connect_timeout 2s;
              proxy_read_timeout 5s;
          }
          
          location /api/ {
              proxy_pass http://spendly-backend:8000;
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
              proxy_connect_timeout 10s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
          }
          
          location /uploads/ {
              proxy_pass http://spendly-backend:8000;
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_connect_timeout 10s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
          }
          
          location / {
              proxy_pass http://spendly-frontend:80;
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
              proxy_connect_timeout 10s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
          }
      }
      EOF
        nginx -t && exec nginx -g "daemon off;"
      '

  # Nginx UI - Web interface for monitoring
  nginx-ui:
    image: uozi/nginx-ui:latest
    container_name: spendly-nginx-ui
    ports:
      - "8091:80"
    restart: unless-stopped
    volumes:
      - /opt/spendly/data/nginx-logs:/var/log/nginx:ro
      - /opt/spendly/data/nginx-ui-config:/etc/nginx-ui
      - /opt/spendly/data/nginx-ui-db:/var/lib/nginx-ui
    environment:
      - NGINX_LOG_DIR=/var/log/nginx
      - GIN_MODE=release
    depends_on:
      init-dirs:
        condition: service_completed_successfully
    command: >
      sh -c '
        mkdir -p /etc/nginx-ui /var/lib/nginx-ui &&
        chown -R 1000:1000 /etc/nginx-ui /var/lib/nginx-ui 2>/dev/null || true &&
        exec nginx-ui
      '
