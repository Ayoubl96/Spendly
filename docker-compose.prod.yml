# Production Docker Compose Configuration
version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: spendly-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/ssl:/etc/ssl/certs:ro
      - ./data/logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - spendly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"] 
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: spendly-frontend
    environment:
      - REACT_APP_API_URL=/api/v1
      - REACT_APP_UPLOAD_URL=/uploads
    volumes:
      - ./data/logs/frontend:/var/log/nginx
    restart: unless-stopped
    networks:
      - spendly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: spendly-backend
    environment:
      - ENVIRONMENT=production
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    volumes:
      - ./data/uploads:/app/uploads
      - ./data/logs/backend:/app/logs
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - spendly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Service
  database:
    image: postgres:15-alpine
    container_name: spendly-database
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./data/backups:/backups
    restart: unless-stopped
    networks:
      - spendly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Security: Don't expose database port in production
    # ports:
    #   - "5432:5432"



  # Backup Service (runs periodically)
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    container_name: spendly-backup
    environment:
      - DB_HOST=database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./data/backups:/backups
      - ./data/uploads:/uploads:ro
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - spendly-network
    # Run backup every day at 2 AM
    entrypoint: |
      sh -c '
        echo "0 2 * * * /backup.sh" | crontab -
        crond -f
      '

networks:
  spendly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
# Health check for the entire stack
x-healthcheck-depends_on: &healthcheck-depends_on
  database:
    condition: service_healthy